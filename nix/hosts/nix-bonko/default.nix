{
  config,
  lib,
  pkgs,
  ...
}:

{
  imports = [ 
    ./hardware-configuration.nix
  ];
  system.stateVersion = "24.11";
  aarch64-linuxSystem.enable = true;

  hostname = {
    enable = true;
    name = "nix-bonko";
  };

  commonBaseHome = {
    enable = true;
    name = "quinnherden";
  };
  nixosBaseHome = {
    enable = true;
    name = "quinnherden";
  };

  quinnherdenUser.enable = true;

  wifi.enable = true;
  openssh.enable = true;

  keyd.enable = true;
  libinput.enable = true;

  docker.enable = true;

  ################

  i3.enable = false;
  redshift.enable = false;

  commonPackages.enable = false;
  linuxPackages.enable = false;

  ################

  programs.zsh.enable = true;
  environment.systemPackages = with pkgs; [
    git
  ];

  ################

  # Containers
  virtualisation.oci-containers.containers."pihole" = {
    image = "pihole/pihole:latest";
    environment = {
      "TZ" = "America/New_York";

      "FTLCONF_webserver_api_password" = "";

      "FTLCONF_dns_listeningMode" = "SINGLE";

      "FTLCONF_dns_queryLogging" = "false";
      "FTLCONF_dns_privacyLevel" = "3";

      "FTLCONF_dns_upstreams" = ''
        8.8.8.8;
        1.1.1.1;
      '';

      "FTLCONF_dns_hosts" = ''
      '';

    };
    ports = [
      "3000:80/tcp"
      "53:53/tcp"
      "53:53/udp"
      "67:67/udp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--network-alias=pihole"
      "--network=pihole_default"
    ];
  };
  systemd.services."docker-pihole" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-pihole_default.service"
    ];
    requires = [
      "docker-network-pihole_default.service"
    ];
    partOf = [
      "docker-compose-pihole-root.target"
    ];
    wantedBy = [
      "docker-compose-pihole-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-pihole_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f pihole_default";
    };
    script = ''
      docker network inspect pihole_default || docker network create pihole_default
    '';
    partOf = [ "docker-compose-pihole-root.target" ];
    wantedBy = [ "docker-compose-pihole-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-pihole-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };

}

